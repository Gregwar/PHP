TD6-1: Installation de Symfony
==============================

Au cours de ce TP en plusieurs parties, nous allons créer une application de gestion de commande de
pizzas.

.. slide::

Installation de Symfony
-----------------------

.. step::
    Etape 1: Récupérer les fichiers
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        
    La meilleure solution afin d'installer Symfony est de passer par composer. Pour cela,
    installez tout d'abord composer quelque part et utilisez la commande ``create-project``:

    .. code-block:: no-highlight
        composer.phar create-project symfony/framework-standard-edition pizza
        
    Composer va alors travailler un moment et vous déploiera le framework dans le dossier ``pizza/``.
    Certaines questions seront aussi posées, laissez pour l'instant les paramètres par défaut.

.. slide::

.. step::

    Etape 2: configurez les droits
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Vous devrez donner les droits aux serveurs en écriture dans les dossiers ``app/cache`` et
    ``var/logs``, par exemple:

    .. code-block:: no-highlight
        chmod -R 777 var/cache/ var/logs/

    Lancez la commande::

        php bin/console server:run

    Et connectez vous à ``http://localhost:8000/``

.. slide::

.. center::
    .. image:: /img/sfwelcome.png

.. slide::

.. step::
    Etape 3: créer votre Bundle
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~

    Une application Symfony réside dans un *Bundle*, ou un "Paquet" en français. Avant de
    commencer à écrire votre code, vous devrez donc créer votre propre Bundle.
        
    Créez maintenant votre Bundle, appellons le ``PizzaBundle``.

    .. code-block:: no-highlight
        php bin/console generate:bundle
        
    Répondez alors ``PizzaBundle`` à la première question qui vous sera posée, et
    laissez les autre valeurs par défaut. Utilisez le format ``annotation`` pour la configuration.

.. slide::

.. step::

    Etape 4: Hello world
    ~~~~~~~~~~~~~~~~~~~~

    Regardez le fichier ``app/config/routing.yml``, il contient théoriquement une nouvelle section
    qui signifie que votre Bundle sera utilisée par annotation pour le routage.

    Le code de votre Bundle se situe désormais dans ``src/PizzaBundle/``, regardez les
    différents fichiers qu'il contient, notamment ``Controller/DefaultController.php`` et 
    ``Resources/views/Default/index.html.twig``.

.. slide::

Prise en main
-------------

.. |archive| image:: /img/archive.png

.. important::
    `|archive| Télécharger l'archive td6.zip </files/td6.zip>`_

Nous allons maintenant créer une structure de site web. Afin de ne pas perdre de temps à réaliser des
graphismes ou des feuilles de styles, une page d'exemple est fournie dans `td6 </files/td6.zip>`_, dans
le dossier ``design/``.

.. step::
    Création du layout
    ~~~~~~~~~~~~~~~~~~

    .. image:: /img/pizza.png
        :style: float:right

    Les templates, ou "vues" de vote application se situent dans le dossier ``Resources/views`` de votre
    bundle.

    Pour commencer, créez un layout principal ``layout.html.twig`` contenant la structure générale du
    site. Placez la feuille de style et les images dans le dossier ``web/`` de Symfony et utilisez la
    fonction ``asset()`` de Twig pour inclure ``style.css``.

    Toutes vos templates hériteront plus tard ce ce ``layout.html.twig`` et surchargeront certain
    de ses blocs.

    Vous pourrez par exemple placer un
    bloc ``contents`` à l'intérieur de votre page. Pour une documentation exhaustive, vous pouvez vous
    référer à la `documentation "Templating" <http://symfony.com/doc/current/book/templating.html>`_ de
    Symfony.

    Faites hériter la page ``Default/index.html.twig`` de ``layout.html.twig``, voilà ce que vous devriez
    obtenir:

.. step::
    Une première page
    ~~~~~~~~~~~~~~~~~

    Maintenant que votre structure est en place, créez une nouvelle action pour lister les pizzas
    dans votre contrôleur. Bien entendu, nous n'allons pour le moment pas créer de base de 
    données.
    Pour cela, vous pourrez ajouter une fonction de ce style avec ses annotations::

        <?php

            /**
             * @Route("/pizzas", name="pizzas_list")
             * @Template()
             */
            public function pizzasAction()
            {
                return [
                    'pizzas' => [
                        '4 fromages', 'Reine', 'Paysanne'
                    ]
                ];
            }

    Testez votre action en vous rendant à la page ``/pizzas`` de votre application, vous
    devriez voir un message d'erreur vous indicant que la template correspondante n'existe pas. Créez
    cette template en héritant du layout et surchargez le bloc du contenu pour afficher la liste des pizzas passées à la template.

.. vi fix: **

.. step::
    Création du premier lien
    ~~~~~~~~~~~~~~~~~~~~~~~~
        
    Modifiez le lien du bouton "Les pizzas" de manière à ce qu'il pointe vers la page que vous venez
    de créer. Attention: ne mettez pas l'adresse de votre cible "en dur", mais utilisez la fonction twig
    ``path``:

    .. code-block:: django
        <a href="{{ path('pizzas_list') }}">Les pizzas</a>

.. step::
    Page d'accueil
    ~~~~~~~~~~~~~~

    Faites également pointer la page "Présentation" vers une second page que vous créerez, qui aura comme
    URL "/", ce sera la page d'accueil de votre site.
