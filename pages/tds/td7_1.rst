TD7-1: La base de données
==================

Dans ce TD, nous utiliserons une base de données contenant des séries, voici ici la structure de la base
de données:

.. |archive| image:: /img/archive.png
.. |schema| image:: /img/schema.png

.. important::
    `|archive| Télécharger l'archive td7.zip </files/td7.zip>`_ 
    `|schema| Voir le schéma de la base </img/db-shows.png>`_

Cette base de données est fournie dans le fichier ``schema.sql`` de l'archive ci-dessus.

Mapping de la base
~~~~~~~~~~~~~~~~~~

Import SQL
----------

.. step::

    Importez la base de données dans votre base MySQL

Créez un nouveau projet Symfony
-------------------------------

.. step::

    Créez un nouveau projet Symfony pour le TD en cours. N'oubliez pas de paramétrer votre fichier
    ``.env`` afin de préciser le ``DATABASE_URL`` permettant de communiquer avec la base de données.

Importer la base de données
---------------------------

.. step::

    Ici, nous allons demander à Doctrine d'importer les données de la base de données et de créer les entitées
    (code PHP) correspondant pour que le mapping fonctionne:

    .. code-block:: text

        symfony console doctrine:mapping:import App\\Entity annotation --path=src/Entity 

    Observez le code des entités ainsi créées dans ``src/Entity``.

Génération des accesseurs
------------------------

.. step::

    Remarquez qu'il n'y a pas d'accesseurs (``getName()`` ...) dans les entités. Il est possible de demander
    à Doctrine de les générer:

    .. code-block:: text

        symfony console make:entity --regenerate

    Observez la modification sur le code.

Création d'un contrôleur automatique (CRUD)
-------------------------------------------

.. step::

    Afin d'afficher les séries de la table ``series``, nous allons utiliser la génération automatique CRUD
    de Symfony:

    .. code-block:: text

        symfony console make:crud

    Accédez ensuite à ``/series`` et observez le résultat.

Retouches
~~~~~~~~~

Affichage des images
--------------------

.. step::

    Les images (poster) des séries sont stockées directement dans la base. Modifiez le code de manière à ce
    qu'elles soient visible dans la page.

Pagination
----------

.. step::

    Modifiez le code de manière à paginer l'affichage des séries.


.. image:: /img/terrible_orm.png
    :class: right

Performances de l'ORM
~~~~~~~~~~~~~~~~~~~~~

Ajout des genres
----------------

.. step::

    Dans le tableau des séries, ajouter la liste des genres de la série séparés par une virgule.

Optimisation
------------

.. step::

    Vérifiez le nombre de requêtes effectuées par la page dans le *profiler*. Modifiez le code
    de manière à n'avoir qu'une seule requête.

..    $series = $repo->createQueryBuilder('s')
..            ->select('s, g')
..            ->join('s.genre', 'g')
..            ->getQuery()
..            ->getResult();










.. slide:: middleSlide

Premiers pas avec Laravel
=========================

.. slide::

Création de notre projet Laravel
--------------------------------

Pour découvrir toutes les étapes à réaliser lorsque l'on débute un nouveau projet en Laravel, nous n'allons pas partir d'une archive de base,
et créer tout nous-même. Rassurez-vous, Laravel va nous aider à *scaffolder* notre projet rapidement.

.. warning::
    
    Évitez le plus possible d'utiliser des logiciels comme **WAMP Server**,
    ou tout autre logiciel similaire qui sert l'application sous l'hôte ``http://localhost``.

    On essaie le plus possible de développer en "conditions réelles", et en production, l'application a son propre nom d'hôte.
    Il est donc souhaité d'avoir un nom d'hôte également en local.

    * **macOS** :
        * Utilisez `Laravel Valet <https://laravel.com/docs/5.7/valet>`_.

    * **Linux** :
        * Le mieux est certainement d'utiliser un `portage de Laravel Valet sous Linux <https://github.com/cpriego/valet-linux>`_.
        C'est un portage de la communauté, non reconnu officiellement mais qui semble stable.

        * Vous pouvez utiliser sinon Docker, Vagrant, ou une stack LAMP

    * **Windows** :
        * Ici aussi vaut mieux utiliser un `portage de Laravel Valet sous Windows <https://github.com/cretueusebiu/valet-windows>`_.

        * Les solutions Docker, Vagrant sont également à imaginer si nécessaire.

.. step::

    Création du projet via Composer
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    La création d'un projet Laravel se fait simplement via **Composer**. Il va se charger de récupérer la structure de base de Laravel,
    et va également installer les dépendences, et faire quelques initialisations comme créer un fichier ``.env`` par défaut,
    générer la clé secrète de l'application *(nous verrons plus tard à quoi elle sert)*, etc...

    Pour créer un nouvau projet Laravel, ouvrez un terminal et lancez la commande :

    .. code-block:: no-highlight
        composer create-project laravel/laravel td7

    Cela va créer un nouveau dossier ``td7`` avec notre projet vierge créé !
    
.. slide::
.. step::

    Accéder à notre projet
    ~~~~~~~~~~~~~~~~~~~~~~

    Si vous utilisez Laravel Valet, vous pouvez aller dans le dossier ``td7`` depuis un terminal et lancer la commande ``valet link td7``
    et votre projet sera accessible sur votre navigateur via ``http://td7.test``.
